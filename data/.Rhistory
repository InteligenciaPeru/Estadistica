View(datos)
tail(datos,10)
filaInicial=4
datos=read.xlsx(fileToRead,
sheet = 1,
startRow = filaInicial,
skipEmptyRows = TRUE, skipEmptyCols = TRUE)
filaInicial=4
datos=read.xlsx(fileToRead,
sheet = 1,
startRow = filaInicial,
skipEmptyRows = TRUE, skipEmptyCols = TRUE)
filaInicial=4
datos=read.xlsx(fileToRead,
sheet = 1,
startRow = filaInicial,
skipEmptyRows = TRUE, skipEmptyCols = TRUE)
tail(datos,10)
filaInicial=4
datos=read.xlsx(fileToRead,
sheet = 1,
startRow = filaInicial,
skipEmptyRows = TRUE, skipEmptyCols = TRUE)
library(openxlsx)
datos<- read_excel(fileToRead, cualHoja)
folder='data'
fileName='idePeru.xlsx'
fileToRead=file.path(folder,fileName)
cualHoja=1
library(openxlsx)
datos<- read_excel(fileToRead, cualHoja)
filaInicial=4
datos=read.xlsx(fileToRead,
sheet = 1,
startRow = filaInicial,
skipEmptyRows = TRUE, skipEmptyCols = TRUE)
tail(datos,10)
# quedan solo la info de provincia, sin perder ubigeo region:
datos=datos[-c(223:226),]
View(datos)
queColumnas=c(1,2)
regiones=datos[,queColumnas]
head(regiones,10)
head(datos)
datos=datos[-c(1:3),]
View(datos)
queColumnas=c(1,2)
regiones=datos[,queColumnas]
head(regiones,10)
regiones=regiones[complete.cases(regiones),]
head(regiones,10)
nombresNuevos=c('regionUbigeo','regionNombre')
names(regiones)=nombresNuevos
head(regiones)
queColumnas=c(2)
provincias=datos[,-queColumnas]
head(provincias,10)
names(provincias)
dejandoUno=seq(4,16,2) # 4,6,8, etc.
queColumnas=c(dejandoUno)
provincias=provincias[,-queColumnas]
head(provincias,10)
provincias=provincias[complete.cases(provincias),]
head(provincias,10)
names(provincias)[c(1,2)]=c('provinciaUbigeo','provinciaNombre')
head(provincias)
names(provincias)
names(provincias)[c(3:9)]=c('pob2012','ide2012','identificacion2012','medicos2012','escolaridad2012','AguaDesague2012','electrificacion2012')
head(provincias)
mean(provincias$pob2012)
str(provincias)
provincias[,c(3:9)]=lapply(provincias[,c(3:9)],as.numeric)
str(provincias)
mean(provincias$pob2012)
mean(provincias$pob2012)
#primero la duplicamos pero con otro nombre (por defecto nueva columna va al final)
provincias$regionUbigeo=provincias$provinciaUbigeo
substr(provincias$regionUbigeo,3,6)='0000'
# jugando con la posiciones:
provincias=provincias[,c(10,1:9)]
head(provincias,10)
provinciasNew=merge(provincias,regiones,by.x = 'regionUbigeo',
by.y='regionUbigeo',
all.x = TRUE) # Esto detecta si alguna provincia no encontró Region.
names(provinciasNew)
provinciasNew=provinciasNew[,c(1:2,11,3:10)]
head(provinciasNew)
?read.xlsx
?write.xlsx
# 'row.names = F' evita que se añada el numero de fila.
write.xlsx(provinciasNew,'DensidadEstado_Peru_2012.xlsx')
names(datosLeidos)
folder='data'
fileName='tips.csv'
fileToRead=file.path(folder,fileName)
datosLeidos=read.csv(fileToRead,strip.white = T,stringsAsFactors = F)
names(datosLeidos)
str(datosLeidos)
summary(datosLeidos)
lapply(datosLeidos[,c(4:7)],as.factor)
datosLeidos[,c(4:7)]=lapply(datosLeidos[,c(4:7)],as.factor)
summary(datosLeidos)
1:10
seq(3,20,3)
summary(datosLeidos)
summary(datosLeidos$totbill)
summary(datosLeidos['totbill','tip'])
summary(datosLeidos['totbill','tip'])
summary(datosLeidos[c('totbill','tip')])
summary(datosLeidos[c('totbill','size')])
summary(datosLeidos[c(2,8)])
folder='data'
fileName='idePeru.xlsx'
fileToRead=file.path(folder,fileName)
cualHoja=1
library(openxlsx)
folder='data'
fileName='idePeru.xlsx'
fileToRead=file.path(folder,fileName)
cualHoja=1
datos<- read.xlsx(fileToRead, cualHoja)
head(datos,10)
filaInicial=4
datos=read.xlsx(fileToRead,
sheet = 1,
startRow = filaInicial,
skipEmptyRows = TRUE, skipEmptyCols = TRUE)
tail(datos,10)
tail(datos,10)
tail(datos,10)
tail(datos,10)
datos=datos[-c(223:226),]
tail(datos,10)
head(datos)
datos=datos[-c(1:3),]
head(datos)
queColumnas=c(1,2)
regiones=datos[,queColumnas]
head(regiones,10)
regiones=regiones[complete.cases(regiones),]
head(regiones,10)
nombresNuevos=c('regionUbigeo','regionNombre')
names(regiones)=nombresNuevos
head(regiones)
queColumnas=c(2)
provincias=datos[,-queColumnas]
head(provincias,10)
names(provincias)
dejandoUno=seq(4,16,2) # 4,6,8, etc.
queColumnas=c(dejandoUno)
provincias=provincias[,-queColumnas]
head(provincias,10)
provincias=provincias[complete.cases(provincias),]
head(provincias,10)
names(provincias)[c(1,2)]=c('provinciaUbigeo','provinciaNombre')
head(provincias)
names(provincias)
names(provincias)
names(provincias)[c(3:9)]=c('pob2012','ide2012','identificacion2012','medicos2012','escolaridad2012','AguaDesague2012','electrificacion2012')
head(provincias)
mean(provincias$pob2012)
str(provincias)
provincias[,c(3:9)]=lapply(provincias[,c(3:9)],as.numeric)
str(provincias)
mean(provincias$pob2012)
#primero la duplicamos pero con otro nombre (por defecto nueva columna va al final)
provincias$regionUbigeo=provincias$provinciaUbigeo
substr(provincias$regionUbigeo,3,6)='0000'
# jugando con la posiciones:
provincias=provincias[,c(10,1:9)]
head(provincias,10)
provinciasNew=merge(provincias,regiones,by.x = 'regionUbigeo',
by.y='regionUbigeo',
all.x = TRUE) # Esto detecta si alguna provincia no encontró Region.
names(provinciasNew)
provinciasNew=provinciasNew[,c(1:2,11,3:10)]
head(provinciasNew)
summary(provinciasNew)
data("USArrests")
USArrests
df=provinciasNew
descriptivos <- data.frame(
Min = apply(df, 2, min), # minimum
Med = apply(df, 2, median), # median
Mean = apply(df, 2, mean), # mean
SD = apply(df, 2, sd), # Standard deviation
Max = apply(df, 2, max) # Maximum
)
descriptivos <- round(descriptivos, 1)
df=provinciasNew[,c(5,11)]
descriptivos <- data.frame(
Min = apply(df, 2, min), # minimum
Med = apply(df, 2, median), # median
Mean = apply(df, 2, mean), # mean
SD = apply(df, 2, sd), # Standard deviation
Max = apply(df, 2, max) # Maximum
)
descriptivos <- round(descriptivos, 1)
head(descriptivos)
df=provinciasNew[,c(5:11)]
descriptivos <- data.frame(
Min = apply(df, 2, min), # minimum
Med = apply(df, 2, median), # median
Mean = apply(df, 2, mean), # mean
SD = apply(df, 2, sd), # Standard deviation
Max = apply(df, 2, max) # Maximum
)
descriptivos <- round(descriptivos, 1)
head(descriptivos)
df <- scale(df)
head(df)
df=provinciasNew[,c(7:11)]
descriptivos <- data.frame(
Min = apply(df, 2, min), # minimum
Med = apply(df, 2, median), # median
Mean = apply(df, 2, mean), # mean
SD = apply(df, 2, sd), # Standard deviation
Max = apply(df, 2, max) # Maximum
)
descriptivos <- round(descriptivos, 1)
head(descriptivos)
df=provinciasNew[,c(7:11)]
descriptivos <- data.frame(
Min = apply(df, 2, min), # minimum
Med = apply(df, 2, median), # median
Mean = apply(df, 2, mean), # mean
SD = apply(df, 2, sd), # Standard deviation
Max = apply(df, 2, max) # Maximum
)
descriptivos <- round(descriptivos, 1)
head(descriptivos)
df <- scale(df)
head(df)
df <- scale(df)
head(df)
d <- dist(df, method = "euclidean")
d.clusters=hclust(d)
d.clusters=hclust(d)
plot(cars.hclust,labels=cars$Car,main='Default from hclust')
plot(d.clusters,labels=cars$Car,main='Default from hclust')
plot(d.clusters,labels=df$provinciaNombre,main='Default from hclust')
d <- dist(df)
d.clusters=hclust(d)
plot(d.clusters,labels=df$provinciaNombre,main='Default from hclust')
plot(d.clusters,labels=df$provinciaNombre,main='Default from hclust')
head(df)
head(df)
head(provinciasNew)
provinciasNew$provinciaNombre
len(provinciasNew$provinciaNombre)
length(provinciasNew$provinciaNombre)
length(unique(provinciasNew$provinciaNombre))
length(provinciasNew$provinciaNombre)==length(unique(provinciasNew$provinciaNombre))
length(provinciasNew$provinciaNombre)==length(unique(provinciasNew$provinciaNombre))
row.names(provinciasNew)=provinciasNew$provinciaNombre
row.names(provinciasNew)=provinciasNew$provinciaNombre
head(provinciasNew)
summary(provinciasNew)
df=provinciasNew[c(7:11)]
descriptivos <- data.frame(
Min = apply(df, 2, min), # minimum
Med = apply(df, 2, median), # median
Mean = apply(df, 2, mean), # mean
SD = apply(df, 2, sd), # Standard deviation
Max = apply(df, 2, max) # Maximum
)
descriptivos <- round(descriptivos, 1)
head(descriptivos)
df <- scale(df)
head(df)
d <- dist(df)
d.clusters=hclust(d)
plot(d.clusters,main='Conglomerados')
plot(d.clusters,main='Conglomerados',cex=0.4)
?hclust
grp <- cutree(d.clusters, k = 4)
# Number of members in each cluster
table(grp)
row.names(df)[grp == 1]
row.names(df)[grp == 2]
row.names(df)[grp == 3]
row.names(df)[grp == 4]
plot(d.clusters, cex = 0.6)
rect.hclust(d.clusters, k = 4, border = 2:5)
?rect.hclust
plot(d.clusters, cex = 0.6)
rect.hclust(d.clusters, k = 4, border = c('red','blue','yellow','green'))
plot(d.clusters, cex = 0.6)
rect.hclust(d.clusters, k = 4, border = c('red','blue','gray','green'))
plot(d.clusters, cex = 0.6)
rect.hclust(d.clusters, k = 4, border = 'red',which = 4)
d <- dist(df)
d.clusters=hclust(d, method = "ward.D2")
plot(d.clusters, cex = 0.6)
rect.hclust(d.clusters, k = 4, border = c('red','blue','gray','green'))
d <- dist(df)
d.clusters=hclust(d, method = "ward.D2")
plot(d.clusters, cex = 0.6)
rect.hclust(d.clusters, k = 4, border = c('red','blue','gray','green'),cex=0.5)
d <- dist(df)
d.clusters=hclust(d, method = "ward.D2")
plot(d.clusters, cex = 0.5)
rect.hclust(d.clusters, k = 4, border = c('red','blue','gray','green'))
library(factoextra)
install.packages("factoextra")
library(factoextra)
grp <- cutree(d.clusters, k = 4)
fviz_cluster(list(data = df, cluster = grp))
?fviz_cluster
library(factoextra)
grp <- cutree(d.clusters, k = 4)
#fviz_cluster(list(data = df, cluster = grp))
fviz_silhouette(d.clusters)
library(NbClust)
install.packages("NbClust")
library(NbClust)
nb <- NbClust(df, distance = "euclidean", min.nc = 2,
max.nc = 10, method = "complete", index ="all")
library(factoextra)
fviz_nbclust(nb) + theme_minimal()
res.hc <- eclust(df, "hclust", k = 3,
method = "complete", graph = FALSE)
head(res.hc$cluster, 15)
res.hc <- eclust(df, "hclust", k = 3,
method = "complete", graph = FALSE)
fviz_dend(res.hc, rect = TRUE, show_labels = FALSE)
fviz_silhouette(res.hc)
res.hc$silinfo$widths
neg_sil_index <- which(sil[, 'sil_width'] < 0)
sil <-res.hc$silinfo$widths
neg_sil_index <- which(sil[, 'sil_width'] < 0)
sil[neg_sil_index, , drop = FALSE]
?eclust
res.hc <- eclust(df, "hclust", k = 4,
method = "complete", graph = FALSE)
fviz_dend(res.hc, rect = TRUE, show_labels = FALSE)
fviz_silhouette(res.hc)
sil <-res.hc$silinfo$widths
neg_sil_index <- which(sil[, 'sil_width'] < 0)
sil[neg_sil_index, , drop = FALSE]
View(df)
df=provinciasNew[c(7:11)]
descriptivos <- data.frame(
Min = apply(df, 2, min), # minimum
Med = apply(df, 2, median), # median
Mean = apply(df, 2, mean), # mean
SD = apply(df, 2, sd), # Standard deviation
Max = apply(df, 2, max) # Maximum
)
descriptivos <- round(descriptivos, 1)
head(descriptivos)
df.scaled1 <- scale(df)
head(df.scaled1)
d1 <- dist(df.scaled1)
d1.clusters=hclust(d1)
plot(d1.clusters,main='Conglomerados',cex=0.4)
grp <- cutree(d1.clusters, k = 4)
# Number of members in each cluster
table(grp)
row.names(df)[grp == 4]
plot(d1.clusters, cex = 0.6)
rect.hclust(d1.clusters, k = 4, border = c('red','blue','gray','green'))
plot(d1.clusters, cex = 0.6)
rect.hclust(d1.clusters, k = 4, border = 'red',which = 4)
d1.clusters=hclust(d1, method = "ward.D2")
plot(d1.clusters, cex = 0.5)
rect.hclust(d1.clusters, k = 4, border = c('red','blue','gray','green'))
library(NbClust)
nb <- NbClust(df.scaled1, distance = "euclidean", min.nc = 2,
max.nc = 10, method = "complete", index ="all")
res.hc <- eclust(df.scaled1, "hclust", k = 4,
method = "complete", graph = FALSE)
fviz_dend(res.hc, rect = TRUE, show_labels = FALSE)
fviz_silhouette(res.hc)
medians = apply(df,2,median)
mads = apply(df,2,mad)
d2.scaled = scale(df,center=medians,scale=mads)
medians = apply(df,2,median)
mads = apply(df,2,mad)
d2.scaled = scale(df,center=medians,scale=mads)
medians = apply(df,2,median)
mads = apply(df,2,mad)
df.scaled2 = scale(df,center=medians,scale=mads)
library(NbClust)
nb <- NbClust(df.scaled2, distance = "euclidean", min.nc = 2,
max.nc = 10, method = "complete", index ="all")
library(factoextra)
fviz_nbclust(nb) + theme_minimal()
res.hc <- eclust(df.scaled2, "hclust", k = 3,
method = "complete", graph = FALSE)
fviz_dend(res.hc, rect = TRUE, show_labels = FALSE)
fviz_silhouette(res.hc)
sil <-res.hc$silinfo$widths
neg_sil_index <- which(sil[, 'sil_width'] < 0)
sil[neg_sil_index, , drop = FALSE]
res.hc <- eclust(df.scaled2, "hclust", k = 3,
method = "ward.D2", graph = FALSE)
fviz_dend(res.hc, rect = TRUE, show_labels = FALSE)
library(NbClust)
nb <- NbClust(df.scaled2, distance = "euclidean", min.nc = 2,
max.nc = 10, method = "ward.D2", index ="all")
fviz_silhouette(res.hc)
sil <-res.hc$silinfo$widths
neg_sil_index <- which(sil[, 'sil_width'] < 0)
sil[neg_sil_index, , drop = FALSE]
?NbClust
library(NbClust)
nb <- NbClust(df.scaled2, distance = "minkowski", min.nc = 2,
max.nc = 10, method = "ward.D2", index ="all")
res.hc <- eclust(df.scaled2, "hclust", k = 3,hc_metric='minkowski',
method = "ward.D2", graph = FALSE)
fviz_dend(res.hc, rect = TRUE, show_labels = FALSE)
fviz_silhouette(res.hc)
sil <-res.hc$silinfo$widths
neg_sil_index <- which(sil[, 'sil_width'] < 0)
sil[neg_sil_index, , drop = FALSE]
fviz_silhouette(res.hc)
sil <-res.hc$silinfo$widths
neg_sil_index <- which(sil[, 'sil_width'] < 0)
sil[neg_sil_index, , drop = FALSE]
res.hc <- eclust(df.scaled2, "hclust", k = 4,hc_metric='minkowski',
method = "ward.D2", graph = FALSE)
fviz_dend(res.hc, rect = TRUE, show_labels = FALSE)
fviz_silhouette(res.hc)
library(factoextra)
grp <- cutree(d.clusters, k = 4)
#fviz_cluster(list(data = df, cluster = grp))
fviz_silhouette(d.clusters)
library(factoextra)
grp <- cutree(res.hc, k = 4)
#fviz_cluster(list(data = df, cluster = grp))
fviz_silhouette(res.hc)
plot(d1.clusters,main='Conglomerados',cex=0.4)
grp <- cutree(d1.clusters, k = 4)
# Number of members in each cluster
table(grp)
plot(d1.clusters, cex = 0.6)
rect.hclust(d1.clusters, k = 4, border = c('red','blue','gray','green'))
plot(d1.clusters, cex = 0.6)
rect.hclust(d1.clusters, k = 4, border = 'red',which = 4)
d1.clusters=hclust(d1, method = "ward.D2")
plot(d1.clusters, cex = 0.5)
rect.hclust(d1.clusters, k = 4, border = c('red','blue','gray','green'))
library(NbClust)
nb <- NbClust(df.scaled1, distance = "euclidean", min.nc = 2,
max.nc = 10, method = "complete", index ="all")
library(factoextra)
fviz_nbclust(nb) + theme_minimal()
?eclust
?NbClust
library(NbClust)
nb <- NbClust(df.scaled1)
?hclust
library(NbClust)
nb <- NbClust(df.scaled1, method = "complete") # 'dist' usa este método por defecto
library(factoextra) # toma su tiempo
fviz_nbclust(nb) + theme_minimal()
res.hc <- eclust(df.scaled1, "hclust", k = 4,
method = "complete", graph = FALSE)
fviz_dend(res.hc, rect = TRUE, show_labels = FALSE)
fviz_silhouette(res.hc)
res.hc <- eclust(df.scaled1, FUNcluster ="hclust", k = 4,
method = "complete", graph = FALSE)
#fviz_dend(res.hc, rect = TRUE, show_labels = FALSE)
res.hc <- eclust(df.scaled1, FUNcluster ="hclust", k = 4,
method = "complete", graph = T)
#fviz_dend(res.hc, rect = TRUE, show_labels = FALSE)
res.hc <- eclust(df.scaled1, FUNcluster ="hclust", k = 4,
method = "complete", graph = T)
#fviz_dend(res.hc, rect = TRUE, show_labels = FALSE)
res.hc <- eclust(df.scaled1, FUNcluster ="hclust", k = 4,
method = "complete")
#fviz_dend(res.hc, rect = TRUE, show_labels = FALSE)
res.hc <- eclust(df.scaled1, FUNcluster ="hclust", k = 4,
method = "complete")
res.hc
#fviz_dend(res.hc, rect = TRUE, show_labels = FALSE)
res.hc <- eclust(df.scaled1, FUNcluster ="hclust", k = 4,
method = "complete", graph = FALSE)
fviz_dend(res.hc, rect = TRUE, show_labels = FALSE)
#sil <-
res.hc$silinfo$widths
#sil <-
res.hc$silinfo#$widths
#sil <-
res.hc#$silinfo#$widths
#sil <-
res.hc$silinfo#$widths
#sil <-
res.hc$silinfo$widths
#sil <-
res.hc$silinfo$widths
#sil <-
res.hc$silinfo$sil_width
#sil <-
res.hc$silinfo$widths
sil
siluetas <-res.hc$silinfo$widths
siluetas
str(siluetas)
siluetas <-res.hc$silinfo
siluetas
str(siluetas)
siluetas <-res.hc$silinfo$widths
siluetas
siluetas[siluetas$sil_width<0,]
neg_sil_index <- which(sil[, 'sil_width'] < 0)
sil[neg_sil_index, , drop = FALSE]
neg_sil_index <- which(siluetas[, 'sil_width'] < 0)
siluetas[neg_sil_index, , drop = FALSE]
?mad
df
